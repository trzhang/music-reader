public class MusicUtil {
	public static double[] frequencies = {27.5, 29.1352, 30.8677, 32.7032, 34.6478, 36.7081, 38.8909, 41.2034, 43.6535, 46.2493, 48.9994, 51.9131, 55, 58.2705, 61.7354, 65.4064, 69.2957, 73.4162, 77.7817, 82.4069, 87.3071, 92.4986, 97.9989, 103.826, 110, 116.541, 123.471, 130.813, 138.591, 146.832, 155.563, 164.814, 174.614, 184.997, 195.998, 207.652, 220, 233.082, 246.942, 261.626, 277.183, 293.665, 311.127, 329.628, 349.228, 369.994, 391.995, 415.305, 440, 466.164, 493.883, 523.251, 554.365, 587.33, 622.254, 659.255, 698.456, 739.989, 783.991, 830.609, 880, 932.328, 987.767, 1046.5, 1108.73, 1174.66, 1244.51, 1318.51, 1396.91, 1479.98, 1567.98, 1661.22, 1760, 1864.66, 1975.53, 2093, 2217.46, 2349.32, 2489.02, 2637.02, 2793.83, 2959.96, 3135.96, 3322.44, 3520, 3729.31, 3951.07, 4186.01};
	public static String[] noteNames = {"A0", "A#/Bb0", "B0", "C1", "C#/Db1", "D1", "D#/Eb1", "E1", "F1", "F#/Gb1", "G1", "G#/Ab1", "A1", "A#/Bb1", "B1", "C2", "C#/Db2", "D2", "D#/Eb2", "E2", "F2", "F#/Gb2", "G2", "G#/Ab2", "A2", "A#/Bb2", "B2", "C3", "C#/Db3", "D3", "D#/Eb3", "E3", "F3", "F#/Gb3", "G3", "G#/Ab3", "A3", "A#/Bb3", "B3", "C4", "C#/Db4", "D4", "D#/Eb4", "E4", "F4", "F#/Gb4", "G4", "G#/Ab4", "A4", "A#/Bb4", "B4", "C5", "C#/Db5", "D5", "D#/Eb5", "E5", "F5", "F#/Gb5", "G5", "G#/Ab5", "A5", "A#/Bb5", "B5", "C6", "C#/Db6", "D6", "D#/Eb6", "E6", "F6", "F#/Gb6", "G6", "G#/Ab6", "A6", "A#/Bb6", "B6", "C7", "C#/Db7", "D7", "D#/Eb7", "E7", "F7", "F#/Gb7", "G7", "G#/Ab7", "A7", "A#/Bb7", "B7", "C8"};
	public static double[][] testData = {
		{0.7405080331578623,0.5285218688891802,0.1043549936260465,0.1289092144901487,0.08550876823849936,0.07727448983783401,0.04654504101823127,0.0571854589318895,0.026882894413685902,0.055693426349553286,0.061719106481522415,0.11753828403950531,0.3234753140611527},
		{0.5199699753106344,0.684903580062884,0.43957449137464705,0.08079109749725134,0.13710890647808396,0.08289789829163692,0.08712263663784393,0.03133236018569255,0.051878802558778414,0.020488923916935502,0.04035958629147542,0.09032723295903547,0.1168044525102921},
		{0.18318000085316286,0.5325210217994808,0.6767271208674076,0.4438365187390626,0.03689648010117459,0.1316217706098813,0.01400968374643722,0.0731003423364023,0.020525717337903895,0.03396616461085353,0.03874820674841492,0.013437705483125345,0.02081884360343005},
		{0.09529640169248035,0.16216817529497476,0.5087023402865404,0.6870269167967157,0.4253482785597686,0.11940327267776556,0.1484174210912693,0.053634635635529664,0.07909035232351842,0.0645546050320381,0.02128403179677774,0.03660234737237566,0.039217292136323745},
		{0.07944423894341858,0.12718989199421463,0.16825745860716798,0.5519779708644629,0.6810635279702626,0.3865154381941569,0.12358516353349328,0.06616061656384029,0.07362276443098915,0.03485980086963719,0.04185065404361177,0.038707707134656384,0.041756169107650634},
		{0.06349002796389659,0.11668044433060983,0.13676936414143964,0.17362328983459863,0.5294739714965265,0.7038810237970928,0.35877236504838117,0.09645939368107925,0.06545145216362336,0.06937964212961122,0.06445566913646121,0.04104550194632742,0.06894841526401448},
		{0.07266916493333661,0.08690619449444284,0.05400452378888716,0.16339026953523225,0.07129890572213,0.4625535163875681,0.7244718755667879,0.4276864249468719,0.0997326529085631,0.10063384335654496,0.09035173414509962,0.029127442316222274,0.04066392459355994},
		{0.05630551314386487,0.057929441184459154,0.10410432965361593,0.10141849532112375,0.14795555875851715,0.18944776293250382,0.428270382757812,0.7264710018637235,0.4181816003548168,0.14815216727192207,0.030514464909046,0.05936512217973188,0.045970001098211755},
		{0.06093826013131129,0.06517523088909337,0.040557355354850166,0.05436069458447504,0.07488428730762206,0.15506912602273906,0.07239357262358051,0.44171240729584693,0.7727076173564813,0.361036247985118,0.15599559785494488,0.02169955949591426,0.07214035889826867},
		{0.04743409557383945,0.009334202303618604,0.05239347251925229,0.044553965519935526,0.08247664007677367,0.09762641463361946,0.11479598674524934,0.1009469646234376,0.42253662722707186,0.8102010180741032,0.3022550855377265,0.15926051985711034,0.03932029057473707},
		{0.010477787462186593,0.04960440553355713,0.03632443721529036,0.04227919990289221,0.08009498007932676,0.07854759453304913,0.11865870356764234,0.07890358804914888,0.1168032854858153,0.393207627173504,0.8253241857040664,0.29649452801733367,0.15526675960392777},
		{0.006420617233463169,0.02990224619955291,0.004149185300328626,0.03674930749100109,0.05252557341401348,0.06754932348116374,0.01150826445248044,0.0797518461788049,0.041416634016507255,0.16222755752458626,0.37586384078933666,0.8762457534904868,0.2162611722091955},
		{0.1212136310081528,0.014054340846123309,0.02010864538501331,0.039443721731836176,0.0744149535034793,0.07736971656419499,0.048315285345935335,0.035065741676022014,0.04079483163542886,0.01948686051555717,0.14623301089716448,0.2828642051554458,0.9298503787810358}
	};
	
	public static double[][] transpose(double[][] arr) {
		double[][] ret = new double[arr[0].length][arr.length];
		for(int i = 0; i < arr.length; i++)
			for(int j = 0; j < arr.length; j++)
				ret[j][i] = arr[i][j];
		return ret;
	}
	
	private static final double EPSILON = 1e-10;
	
	// Gaussian elimination with partial pivoting
    public static double[] lsolve(double[][] A, double[] b) {
        int N  = b.length;

        for (int p = 0; p < N; p++) {

            // find pivot row and swap
            int max = p;
            for (int i = p + 1; i < N; i++) {
                if (Math.abs(A[i][p]) > Math.abs(A[max][p])) {
                    max = i;
                }
            }
            double[] temp = A[p]; A[p] = A[max]; A[max] = temp;
            double   t    = b[p]; b[p] = b[max]; b[max] = t;

            // singular or nearly singular
            if (Math.abs(A[p][p]) <= EPSILON) {
                throw new RuntimeException("Matrix is singular or nearly singular");
            }

            // pivot within A and b
            for (int i = p + 1; i < N; i++) {
                double alpha = A[i][p] / A[p][p];
                b[i] -= alpha * b[p];
                for (int j = p; j < N; j++) {
                    A[i][j] -= alpha * A[p][j];
                }
            }
        }

        // back substitution
        double[] x = new double[N];
        for (int i = N - 1; i >= 0; i--) {
            double sum = 0.0;
            for (int j = i + 1; j < N; j++) {
                sum += A[i][j] * x[j];
            }
            x[i] = (b[i] - sum) / A[i][i];
        }
        return x;
    }

}
